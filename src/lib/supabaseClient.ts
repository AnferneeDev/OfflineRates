import AsyncStorage from "@react-native-async-storage/async-storage";
import { createClient } from "@supabase/supabase-js";

// Replace with your actual Supabase URL and Anon Key
const supabaseUrl = "https://avgcumwjkhxslajaxgtb.supabase.co";
const supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2Z2N1bXdqa2h4c2xhamF4Z3RiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE0OTQ1MjgsImV4cCI6MjA3NzA3MDUyOH0.O6rBDDYVeZlTe_hZJzXIQfEsoLHr0M7-l8oaqeaphec";

// --- Important: AsyncStorage Setup ---
// The Supabase client needs a way to store the user's session (JWT).
// For React Native, we use AsyncStorage.
const asyncStorageAdapter = {
  getItem: async (key: string): Promise<string | null> => {
    return AsyncStorage.getItem(key);
  },
  setItem: async (key: string, value: string): Promise<void> => {
    return AsyncStorage.setItem(key, value);
  },
  removeItem: async (key: string): Promise<void> => {
    return AsyncStorage.removeItem(key);
  },
};

// Create the Supabase client
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  // Add <Database> type here
  auth: {
    // Use AsyncStorage to store the session
    storage: asyncStorageAdapter,
    // Automatically refresh the token so the user stays logged in
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false, // Important for React Native
  },
  // --- THIS IS THE FIX for PGRST106 error ---
  db: {
    schema: "app", // Explicitly tell client to use the 'app' schema
  },
  // --- END FIX ---
});

// --- Type definitions for your Supabase tables ---
// This uses TypeScript's Utility Types to infer the types
// directly from your database schema, ensuring type safety.

// Define the shape of a row in your 'categories' table
export type CategoryRow = Database["app"]["Tables"]["categories"]["Row"];

// Define the shape of a row in your 'services' table
export type ServiceRow = Database["app"]["Tables"]["services"]["Row"];

// Define the shape expected for inserting a new category
export type CategoryInsert = Database["app"]["Tables"]["categories"]["Insert"];

// Define the shape expected for inserting a new service
export type ServiceInsert = Database["app"]["Tables"]["services"]["Insert"];

// Define the shape expected for updating a category
export type CategoryUpdate = Database["app"]["Tables"]["categories"]["Update"];

// Define the shape expected for updating a service
export type ServiceUpdate = Database["app"]["Tables"]["services"]["Update"];

// --- Helper Type for the Database Schema ---
// This is a placeholder. For full type safety, you'd generate this
// using the Supabase CLI, but this works for the MVP.
export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[];

// Define the overall structure of your database for TypeScript
// Ensure this matches your actual schema name ('app') and table definitions
export type Database = {
  app: {
    // Your schema name
    Tables: {
      categories: {
        Row: {
          // The shape of data returned from SELECT *
          id: string; // uuid -> string
          name: string; // text -> string
          created_at: string; // timestamptz -> string
          updated_at: string; // timestamptz -> string
        };
        Insert: {
          // Shape required for inserting data
          id?: string; // uuid is generated by DB
          name: string;
          created_at?: string; // Default value in DB
          updated_at?: string; // Default value in DB
        };
        Update: {
          // Shape for updating data (all fields optional)
          id?: string;
          name?: string;
          created_at?: string;
          updated_at?: string;
        };
        Relationships: []; // No defined relationships in this structure
      };
      services: {
        Row: {
          id: string; // uuid -> string
          category_id: string | null; // uuid -> string | null
          name: string; // text -> string
          price: number; // numeric -> number
          description: string | null; // text -> string | null
          created_at: string; // timestamptz -> string
          updated_at: string; // timestamptz -> string
        };
        Insert: {
          id?: string; // uuid is generated by DB
          category_id?: string | null;
          name: string;
          price: number;
          description?: string | null;
          created_at?: string; // Default value in DB
          updated_at?: string; // Default value in DB
        };
        Update: {
          id?: string;
          category_id?: string | null;
          name?: string;
          price?: number;
          description?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Relationships: [
          // Define the relationship to categories
          {
            foreignKeyName: "services_category_id_fkey"; // Check Supabase dashboard for exact name if different
            columns: ["category_id"];
            referencedRelation: "categories";
            referencedColumns: ["id"];
          }
        ];
      };
    };
    Views: { [_ in never]: never }; // No views defined
    Functions: { [_ in never]: never }; // No functions defined
    Enums: { [_ in never]: never }; // No enums defined
    CompositeTypes: { [_ in never]: never }; // No composite types defined
  };
};
